factors_weights = {
    'Technical': {
        'Graphics Quality': 15,
        'Polygon Count': 5,
        'Texture Quality': 5,
        'Lighting and Shadows': 5,
        'Animation Quality': 4,
        'Particle Effects': 4,
        'Real-time Reflections': 3,
        'Physics and Collision Detection': 10,
        'Soft-body Physics': 5,
        'Fluid Dynamics': 5,
        'Ragdoll Physics': 4,
        'Destructible Environments': 4,
        'Level Design and World Building': 12,
        'Map Size': 4,
        'Environmental Diversity': 4,
        'Verticality and Layering': 4,
        'Gameplay Mechanics': 15,
        'Unique Mechanics': 7,
        'Mechanics Balance': 4,
        'Control Schemes': 4,
        'Player Progression': 5,
        'Customization Options': 5,
        'Game Balance': 5,
        'AI and NPC Behavior': 10,
        'Pathfinding': 3,
        'Decision-making': 4,
        'Learning AI': 3,
        'Social AI': 3,
        'Adaptive Difficulty': 4,
        'Audio': 5,
        'Spatial Audio': 2,
        'Dynamic Music': 2,
        'Voiceover Sync': 1,
        'Foley Sound Effects': 2,
        'Procedural Audio': 2,
        'UI and UX': 8,
        'Accessibility': 4,
        'Customizable UI': 4,
        'Intuitive Design': 4,
        'HUD Customization': 4,
        'Multiplayer and Networking': 10,
        'Server Stability': 4,
        'Anti-cheat': 3,
        'Matchmaking': 3,
        'Peer-to-Peer vs. Server-based': 4,
        'Scalability': 4,
        'Scripting and Programming': 15,
        'Custom Engines': 5,
        'Optimization': 5,
        'Existing Engines': 5,
        'Cross-Platform Compatibility': 5,
        'Middleware Integration': 5
    },
    'Project Management': {
        'Dev Team Size': 10,
        'Core Team': 5,
        'Extended Team': 3,
        'Outsourcing': 2,
        'Senior vs. Junior Developers': 3,
        'Team Turnover Rate': 2,
        'Dev Time': 10,
        'Crunch Periods': 4,
        'Delays': 3,
        'Overruns': 3,
        'Time Management': 3,
        'Impact of Delays': 3,
        'Project Budget': 10,
        'Pre-production': 3,
        'Production': 4,
        'Post-production': 3,
        'Funding Sources': 3,
        'Financial Management': 3,
        'Impact of Budget Changes': 3,
        'Project Management': 10,
        'Risk Management': 4,
        'Stakeholder Communication': 3,
        'Agile/Scrum': 3,
        'Team Morale': 3,
        'Quality Assurance': 4
    },
    'Marketing and Business': {
        'Marketing Strategy': 8,
        'Influencer Partnerships': 3,
        'Community Engagement': 3,
        'Viral Marketing': 3,
        'Pre-Release Hype': 3,
        'Market Research': 5,
        'Focus Groups': 3,
        'Surveys': 2,
        'Competitive Benchmarking': 3,
        'Post-Release Analysis': 2,
        'Sales and Distribution': 8,
        'Regional Pricing': 3,
        'Physical Distribution': 3,
        'Digital Distribution': 2,
        'DRM': 2,
        'Return Policies': 2,
        'Business Model': 5,
        'Seasonal Events': 2,
        'Promotions': 2,
        'Cross-promotions': 1,
        'User Retention': 3,
        'Economic Factors': 2
    },
    'Creative and Artistic': {
        'Art Style': 10,
        'Consistency': 3,
        'Artistic Techniques': 3,
        'Innovation': 4,
        'Cultural Influences': 3,
        'Story and Narrative': 12,
        'Branching Narratives': 4,
        'Interactive Storytelling': 4,
        'Lore Integration': 4,
        'Multiple Endings': 3,
        'Player Agency': 3,
        'Character Design': 10,
        'Animation': 3,
        'Voice Acting': 3,
        'Emotional Range': 4,
        'Motion Capture': 3,
        'Backstory Development': 3,
        'Environmental Design': 10,
        'Storytelling': 3,
        'Dynamic Weather': 3,
        'Day-Night Cycles': 4,
        'Interactive Environments': 3,
        'Environmental Diversity': 3
    },
    'Support and Maintenance': {
        'Post-Launch Support': 8,
        'Community Updates': 3,
        'Content Releases': 3,
        'Bug Fixes': 2,
        'Feedback Loop': 3,
        'Long-term Roadmap': 2,
        'Modding Support': 5,
        'Documentation': 3,
        'Community Support': 2,
        'Modding Platforms': 2,
        'Customer Support': 5,
        'In-game Support': 3,
        'Multilingual Support': 2,
        'AI Support': 2,
        'Proactive Support': 2
    }
}


def scale_ratings(ratings):
    max_rating = 1000  # Maximum rating value
    scaled = {factor: (rating / max_rating) * 100 for factor, rating in ratings.items()}
    print(f"Scaled Ratings: {scaled}")  # Debugging
    return scaled

def calculate_complexity_rating(ratings):
    scaled_ratings = scale_ratings(ratings)
    total_weighted_score = 0
    max_possible_score = sum(weight * 100 for weight in factors_weights.values())
    
    for factor, weight in factors_weights.items():
        rating = scaled_ratings.get(factor, 0)
        total_weighted_score += rating * weight

    normalized_score = (total_weighted_score / max_possible_score) * 100
    return normalized_score
